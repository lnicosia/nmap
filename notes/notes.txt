# Host netcat server
$ nc -l 127.0.0.1 -p 4242 -v -k

# Filter a port
$ sudo /sbin/iptables -A INPUT -p tcp --destination-port 4241 -j DROP

# SYN scan timeout
$ grep -nr "select" notes/strace.txt
select(5, [4], [4], [4], {tv_sec=1, tv_usec=533000})

# destination display before exiting
# leak g_data.destination in ft_strdup->parse_nmap_options

# match nmap port state when invalid packet

# Data structure

struct t_data {
	unsigned long long	opt;
	struct s_ip			*ips;
};

struct s_ip {
	struct sockaddr_in	*saddr; /* sockaddr_in of source */
	struct sockaddr_in	*daddr; /* sockaddr_in of dest */
	char				*destination; /* user input */
	int					status; /* [UP/DOWN] */
	struct s_port		*scans; /* list of ports to scan along with the type of scan */
	struct s_ip			*next; /* next ip */
};

struct s_port {
	int					scantype; /* Type of scan */
	int					status; /* Current status [READY/SCANNING/OPEN/CLOSED/FILTERED] */
	char				*service /* Found service */
	uint16_t			sport; /* Source port */
	uint16_t			dport; /* Destination port */
	struct s_port		*next; /* Next scan */
};

# Main thread reads scan list and redistributes tasks to workers
# When a worker is done, it sends the result to the main thread

www.google.com:
22  SYN     | 22  XMAS  | 22  UDP   | 23  SYN
 [SCANNING]    [OPEN]      [CLOSED]     [READY]

127.0.0.1:
22  SYN     | 22  XMAS  | 22  UDP   | 23  SYN
 [SCANNING]    [OPEN]      [CLOSED]     [READY]

./ft_nmap localhost -p 22 --scan=SYN,,FIN

ip.txt = 127.0.0.1
		 www.google.com

./ft_nmap localhost --file ip.txt -p 22 --scan=SYN,FIN

127.0.0.1 -> www.google.com

sudo iptables -A OUTPUT -p tcp --source-port 4242 --tcp-flags RST RST -j DROP

non root scans with DGRAM sockets

# Flags d'opti (remove -g ?)

# print date and hours at launch
"Starting Nmap 7.60 ( https://nmap.org ) at 2022-10-06 10:24 CEST"

#### Opti ####
Do not identify the services in each thread during runtime but before.
Going through the lists in every thread is slow. + the locking, and we do it two times:
when the thread is searching for a scan to do, and when the thread updates a scan it received.
So maybe use arrays or feed the threads with what scan they must do so they don't need to
search themselves?
Receiving in the threads is slow but it is necessary to receive soon enough after sending
otherwise we may lose the answers

# /!\ Progress bar /!\

# Do we really need to lock when writing scan results?

# Remove useless comments before push

# Allow 1024 ports max
