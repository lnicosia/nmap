./ft_nmap localhost -p 22 --scan=SYN,,FIN

ip.txt = 127.0.0.1
		 www.google.com

./ft_nmap localhost --file ip.txt -p 22 --scan=SYN,FIN

127.0.0.1 -> www.google.com

sudo iptables -A OUTPUT -p tcp --source-port 4242 --tcp-flags RST RST -j DROP

non root scans with DGRAM sockets

# Flags d'opti (remove -g ?)

# print date and hours at launch
"Starting Nmap 7.60 ( https://nmap.org ) at 2022-10-06 10:24 CEST"

#### Opti ####
Do not identify the services in each thread during runtime but before.
Going through the lists in every thread is slow. + the locking, and we do it two times:
when the thread is searching for a scan to do, and when the thread updates a scan it received.
So maybe use arrays or feed the threads with what scan they must do so they don't need to
search themselves?
Receiving in the threads is slow but it is necessary to receive soon enough after sending
otherwise we may lose the answers

# Do we really need to lock when saving scan results (check this with the future refactor)?

# Remove useless comments before push

# Allow 1024 ports max

# Scans
All scans are consistant but UDP

# Do not forget to put all scantypes by default if none are specified (subject restriction)

# error -p
make -j4 && sudo ./ft_nmap scanme.org -p1-24,26-50 -t 250

# fix display on target error cases
# libc leak when invalid address ?
$ sudo valgrind ./ft_nmap localhostinvalidhostcc

# must recheck if segfault/leak when thread creation fail

# remove protocol checks in scans when possible (checking if protocol is tcp for a tcp socket is useless)

# UDP speed: scanning 1000 ports at once is slow due to icmp limiting but
scanning multiple hosts is no big deal

# TODO: gentle debug level

# TODO: Include dynamic timeout in threads
